jobs:
- job: linux
  pool: {vmImage: 'Ubuntu-16.04'}
  strategy:
    matrix:
      x86:
        image: 'fdabrandao/manylinux32:coin.v1'
        nbits: 32
      x64:
        image: 'fdabrandao/manylinux64:coin.v1'
        nbits: 64
  variables:
    upload: $(Build.ArtifactStagingDirectory)
  steps:
    - bash: |
        lscpu | grep -E '^Thread|^Core|^Socket|^CPU\('
        cat /proc/cpuinfo
      displayName: Check CPU
    - bash: |
        BUILD_DIR=manylinux/linux$NBITS/
        git submodule update --init --recursive --remote
        mkdir -p $BUILD_DIR/*
        rm -rf $BUILD_DIR/*
        docker run -v `pwd`:/base --rm $IMAGE /base/manylinux/build.sh $NBITS
      displayName: Build package
    - bash: |
        BUILD_DIR=manylinux/linux$NBITS/
        UPLOAD_DIR=$UPLOAD/linux$NBITS/
        mkdir -p $UPLOAD_DIR
        cp coin/Cbc/Cbc/LICENSE $UPLOAD_DIR/coin-license.txt
        cp $BUILD_DIR/bin/{cbc,bonmin,couenne,ipopt} $UPLOAD_DIR
        cp $BUILD_DIR/coin-versions.txt $UPLOAD_DIR
        cd $UPLOAD_DIR
        tar czvf linux$NBITS.tar.gz *
        zip cbc coin-license.txt cbc-linux$NBITS.zip
        zip bonmin coin-license.txt bonmin-linux$NBITS.zip
        zip couenne coin-license.txt couenne-linux$NBITS.zip
        zip ipopt coin-license.txt ipopt-linux$NBITS.zip
      displayName: Upload package
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
- job: macos
  pool: {vmImage: 'macOS-10.13'}
  variables:
    upload: $(Build.ArtifactStagingDirectory)
  steps:
    - script: |
        brew install gcc
      displayName: Install gcc (installs gfortran too)
    - bash: |
        git submodule update --init --recursive --remote
        mkdir build
        cd build
        cmake ..
        make all coin-versions -j2
        make test || true
      displayName: Build package
    - bash: |
        UPLOAD_DIR=$UPLOAD/macos/
        mkdir -p $UPLOAD_DIR
        cp coin/Cbc/Cbc/LICENSE $UPLOAD_DIR/coin-license.txt
        cp build/bin/{cbc,bonmin,couenne,ipopt} $UPLOAD_DIR
        cp build/coin-versions.txt $UPLOAD_DIR
        cd $UPLOAD_DIR
        tar czvf macos64.tar.gz *
        zip cbc coin-license.txt cbc-osx.zip
        zip bonmin coin-license.txt bonmin-osx.zip
        zip couenne coin-license.txt couenne-osx.zip
        zip ipopt coin-license.txt ipopt-osx.zip
      displayName: Upload package
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
- job: windows
  pool: {vmImage: 'windows-2019'}
  variables:
    upload: $(Build.ArtifactStagingDirectory)
    nbits: 64
  steps:
    - bash: |
        git submodule update --init --recursive --remote
        mkdir build
        cd build
        cmake .. -G "Visual Studio 16 2019" -A x64 -DCOIN_DISABLE_WARNINGS=1 -DCMAKE_SH="CMAKE_SH-NOTFOUND"
        cmake --build . -t ALL_BUILD coin-versions -j 2 --config Release
        ctest -C Release || true
      displayName: Build package
    - bash: |
        UPLOAD_DIR=$UPLOAD/win$NBITS/
        mkdir -p $UPLOAD_DIR
        cp coin/Cbc/Cbc/LICENSE $UPLOAD_DIR/coin-license.txt
        cp build/bin/Release/{cbc.exe,bonmin.exe,couenne.exe,ipopt.exe,libipoptfort.dll} $UPLOAD_DIR
        cp build/coin-versions.txt $UPLOAD_DIR
        cd $UPLOAD_DIR
        7z a -tzip win$NBITS.zip *
        7z a -tzip cbc-win$NBITS.zip cbc coin-license.txt
        7z a -tzip bonmin-win$NBITS.zip bonmin coin-license.txt
        7z a -tzip couenne-win$NBITS.zip couenne coin-license.txt
        7z a -tzip ipopt-win$NBITS.zip ipopt libipoptfort.dll coin-license.txt
      displayName: Upload package
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
