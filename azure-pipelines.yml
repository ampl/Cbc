jobs:
- job: linux
  pool: {vmImage: 'Ubuntu-16.04'}
  strategy:
    matrix:
      x86:
        upload: $(Build.ArtifactStagingDirectory)
        image: 'fdabrandao/manylinux32:coin.v1'
        nbits: 32
      x64:
        upload: $(Build.ArtifactStagingDirectory)
        image: 'fdabrandao/manylinux64:coin.v1'
        nbits: 64
  steps:
    - bash: |
        lscpu | grep -E '^Thread|^Core|^Socket|^CPU\('
        cat /proc/cpuinfo
      displayName: Check CPU
    - bash: |
        BUILD_DIR=manylinux/linux$NBITS/
        git submodule update --init --recursive --remote
        mkdir -p $BUILD_DIR/*
        rm -rf $BUILD_DIR/*
        docker run -v `pwd`:/base --rm $IMAGE /base/manylinux/build.sh $NBITS
      displayName: Build package
    - bash: |
        BUILD_DIR=manylinux/linux$NBITS/
        UPLOAD_DIR=$UPLOAD/linux$NBITS/
        mkdir -p $UPLOAD_DIR
        cp -r $BUILD_DIR/bin/{cbc,bonmin,couenne,ipopt} $UPLOAD_DIR
        cp $BUILD_DIR/coin-versions.txt $UPLOAD_DIR
        cd $UPLOAD_DIR
        tar czvf linux$NBITS.tar.gz *
      displayName: Upload package
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
- job: macos
  pool: {vmImage: 'macOS-10.13'}
  variables:
    upload: $(Build.ArtifactStagingDirectory)
  steps:
    - script: |
        brew install gcc
      displayName: Install gcc (installs gfortran too)
    - bash: |
        git submodule update --init --recursive --remote
        mkdir build
        cd build
        cmake ..
        make all coin-versions -j4
        make test || true
      displayName: Build package
    - bash: |
        UPLOAD_DIR=$UPLOAD/macos/
        mkdir -p $UPLOAD_DIR
        cp -r build/bin/{cbc,bonmin,couenne,ipopt} $UPLOAD_DIR
        cp build/coin-versions.txt $UPLOAD_DIR
        cd $UPLOAD_DIR
        tar czvf macos64.tar.gz *
      displayName: Upload package
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
- job: windows
  pool: {vmImage: 'vs2017-win2016'}
  variables:
    upload: $(Build.ArtifactStagingDirectory)
  steps:
    - bash: |
        git submodule update --init --recursive --remote
        mkdir build
        cd build
        cmake .. -G"MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND"
        cmake --build . --parallel 4
        ctest
        mkdir -p $UPLOAD/windows
        cp -r * $UPLOAD/windows
      displayName: Build package
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(Build.ArtifactStagingDirectory)'}
